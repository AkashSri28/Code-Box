/*Alternate solution: swap (a[i][j], a[j][i])
/*
 * clockwise rotate
 * first reverse up to down, then swap the symmetry 
 * 1 2 3     7 8 9     7 4 1
 * 4 5 6  => 4 5 6  => 8 5 2
 * 7 8 9     1 2 3     9 6 3
*/
void rotate(vector<vector<int> > &matrix) {
    reverse(matrix.begin(), matrix.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}

/*
 * anticlockwise rotate
 * first reverse left to right, then swap the symmetry
 * 1 2 3     3 2 1     3 6 9
 * 4 5 6  => 6 5 4  => 2 5 8
 * 7 8 9     9 8 7     1 4 7
*/
void anti_rotate(vector<vector<int> > &matrix) {
    for (auto vi : matrix) reverse(vi.begin(), vi.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}
*/

class GFG
{
    static void rotate(int matrix[][]) 
    {
        // Code Here
        int i, j, N=matrix[0].length, temp;
        for(i=0;i<N;i++){
            for(j=i;j<N-i-1;j++){
                temp=matrix[i][j];
                matrix[i][j]=matrix[j][N-i-1];
                matrix[j][N-i-1]=matrix[N-i-1][N-j-1];
                matrix[N-i-1][N-j-1]=matrix[N-j-1][i];
                matrix[N-j-1][i]=temp;
            }
        }
    }
}
