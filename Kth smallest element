/*Important points
1. Quick Select Algorithm
2. Partition Algorithm
3. Shuffle to ensure TC=O(n)
TC=O(n)
SC=O(1)*/

class Solution{
    private static void shuffle(int a[]) {

        final Random random = new Random();
        for(int ind = 1; ind < a.length; ind++) {
            final int r = random.nextInt(ind + 1);
            swap(a, ind, r);
        }
    }
    public static void swap(int[] arr, int i, int j){
        int temp;
        temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public static int partition(int[] arr, int low, int high){
        int pivot = high, i, j=low;
        for(i=low;i<high;i++){
            if(arr[i]<arr[pivot]){
                swap(arr, i, j);
                j++;
            }
        }
        swap(arr, j, pivot);
        return j;
    }
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        //Your code here
        shuffle(arr);
        int pivot;
        while(l<r){
            pivot = partition(arr, l, r);
            if(pivot == k-1){
                break;
                //return arr[k-1];
            }
            else if(pivot < k-1){
                l=pivot+1;
                //return kthSmallest(arr, pivot+1, r, k);
            }
            else{
                r=pivot-1;
                //return kthSmallest(arr, l, pivot-1, k);
            }
        }
        return arr[k-1];
        
    } 
}
