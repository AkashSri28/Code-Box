/* slow and fast pointer method
Edge cases: check if head is start of cycle
*/

class Solution
{
    //Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
        if(head.next == null){
            return;
        }
        Node slow = head.next, fast = head.next.next;
        while(fast!=null && fast.next!=null){
            if(slow==fast){
                break;
            }
            fast = fast.next.next;
            slow = slow.next;
        }
        if(slow == fast){
            fast=head;
            if(slow == head){
                while(fast.next!=slow){
                    fast=fast.next;
                }
                fast.next=null;
            }
            else{
                while(slow.next != fast.next){
                    slow=slow.next;
                    fast=fast.next;
                }
                slow.next=null;
            }
        }
    }
}
