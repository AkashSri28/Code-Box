/* Important Points
Extension of 2-sum problem
TC= O(nlogn) [sorting] + O(n [for each element] * n [2 sum check]) = O(n^2)
*/

class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
	public boolean findTriplets(int arr[] , int n)
    {
        //add code here.
        boolean tripletExists=false;
        int i, j, k, target, currSum;
        Arrays.sort(arr);
        for(i=0;i<n;i++){
            target = -1*arr[i];
            k=n-1;
            for(j=i+1;j<k;j++){
                currSum=arr[j]+arr[k];
                while(k>j && currSum>target){
                    k--;
                    currSum=arr[j]+arr[k];
                }
                if(currSum==target){
                    tripletExists = true;
                    return tripletExists;
                }
            }
        }
        return tripletExists;
    }
}
